---
docker_config: &docker_config
  image: plugins/docker
  secrets: [ docker_username, docker_password ]

docker_master_push: &docker_master_push
  <<: *docker_config
  when:
    branch: master
    event: push

docker_tag: &docker_tag
  <<: *docker_config
  when:
    event: tag

workspace:
  base: /go
  path: src/github.com/drone/drone

pipeline:
  test:
    image: golang:1.8
    commands:
      - go get -u github.com/drone/drone-ui/dist
      - go get -u golang.org/x/tools/cmd/cover
      - go get -u golang.org/x/net/context
      - go get -u golang.org/x/net/context/ctxhttp
      - go get -u github.com/golang/protobuf/proto
      - go get -u github.com/golang/protobuf/protoc-gen-go
      - go test -cover $(go list ./... | grep -v /vendor/)

  test_postgres:
    image: golang:1.8
    environment:
      - DATABASE_DRIVER=postgres
      - DATABASE_CONFIG=host=postgres user=postgres dbname=postgres sslmode=disable
    commands:
      - go test github.com/drone/drone/store/datastore

  test_mysql:
    image: golang:1.8
    environment:
      - DATABASE_DRIVER=mysql
      - DATABASE_CONFIG=root@tcp(mysql:3306)/test?parseTime=true
    commands:
      - go test github.com/drone/drone/store/datastore

  build:
    image: golang:1.8
    commands: sh .drone.sh
    secrets: [ ssh_key ]
    when:
      event: [ push, tag ]

  publish_server_alpine:
    <<: *docker_master_push
    repo: drone/drone
    dockerfile: Dockerfile.alpine
    tag: [ alpine ]

  publish_server:
    <<: *docker_master_push
    repo: drone/drone
    tag: [ latest ]

  publish_agent_alpine:
    <<: *docker_master_push
    repo: drone/agent
    dockerfile: Dockerfile.agent.alpine
    tag: [ alpine ]

  publish_agent_arm:
    <<: *docker_master_push
    repo: drone/agent
    dockerfile: Dockerfile.agent.linux.arm
    tag: [ linux-arm ]

  publish_agent_arm64:
    <<: *docker_master_push
    repo: drone/agent
    dockerfile: Dockerfile.agent.linux.arm64
    tag: [ linux-arm64 ]

  publish_agent_amd64:
    <<: *docker_master_push
    repo: drone/agent
    dockerfile: Dockerfile.agent
    tag: [ latest ]

  release_server_alpine:
    <<: *docker_tag
    repo: drone/drone
    dockerfile: Dockerfile.alpine
    tag: [ 0.8-alpine ]

  release_agent_alpine:
    <<: *docker_tag
    repo: drone/agent
    dockerfile: Dockerfile.agent.alpine
    tag: [ 0.8-alpine ]

  release_server:
    <<: *docker_tag
    repo: drone/drone
    tag: [ 0.8, 0.8.1 ]

  release_agent:
    <<: *docker_tag
    repo: drone/agent
    dockerfile: Dockerfile.agent
    tag: [ 0.8, 0.8.1 ]

services:
  postgres:
    image: postgres:9.6
    environment:
      - POSTGRES_USER=postgres
  mysql:
    image: mysql:5.6.27
    environment:
      - MYSQL_DATABASE=test
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
